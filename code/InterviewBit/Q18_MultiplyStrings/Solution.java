package Q18_MultiplyStrings;

public class Solution {
  public String multiply(String A, String B) {
    StringBuilder n1 = new StringBuilder(A).reverse();
    StringBuilder n2 = new StringBuilder(B).reverse();

    int[] d = new int[A.length() + B.length()];

    // multiply each digit and sum at the corresponding positions
    for (int i = 0; i < n1.length(); i++) {
      for (int j = 0; j < n2.length(); j++) {
        d[i + j] += (n1.charAt(i) - '0') * (n2.charAt(j) - '0');
      }
    }

    StringBuilder sb = new StringBuilder();

    // calculate each digit
    for (int i = 0; i < d.length; i++) {
      int mod = d[i] % 10;
      int carry = d[i] / 10;
      if (i + 1 < d.length) {
        d[i + 1] += carry;
      }
      sb.insert(0, mod);
    }

    // remove leading 0's
    while (sb.charAt(0) == '0' && sb.length() > 1) {
      sb.deleteCharAt(0);
    }

    return sb.toString();
  }

  public String multiplyBruteForce(String A, String B) {
    String ans = "0";
    for (int i = 0; i < A.length(); i++) {
      char a = A.charAt(i);
      int trailingZeroA = A.length() - i - 1;
      for (int j = 0; j < B.length(); j++) {
        int trailingZeroB = B.length() - j - 1;
        char b = B.charAt(j);

        String ab = multiply(a, b, trailingZeroA + trailingZeroB);
        // System.out.println("i: " + i + ", j: " + j + " = " + ab);
        ans = add(ans, ab);
      }
    }

    return ans;
  }

  private String add(String a, String b) {
    if (a.length() > b.length()) {
      String temp = a;
      a = b;
      b = temp;
    }

    char[] chars = new char[b.length()];
    int carry = 0;

    for (int i = 0; i < chars.length; i++) {
      int position = a.length() - i - 1;
      int digitA = position >= 0 ? a.charAt(position) - '0' : 0;

      position = b.length() - i - 1;
      int digitB = b.charAt(position) - '0';

      int sum = digitA + digitB + carry;
      chars[position] = (char) ('0' + sum % 10);
      carry = sum / 10;
    }
    StringBuilder sb = new StringBuilder();
    if (carry > 0) {
      sb.append(carry);
    }
    boolean trimmingLeadingZero = carry == 0;
    for (char c : chars) {
      if (trimmingLeadingZero) {
        if (c == '0') {
          continue;
        } else {
          trimmingLeadingZero = false;
        }
      }
      sb.append(c);
    }
    if (trimmingLeadingZero) {
      sb.append('0');
    }
    return sb.toString();
  }

  private String multiply(char a, char b, int trailingZero) {
    int ans = (a - '0') * (b - '0');
    StringBuilder sb = new StringBuilder();
    sb.append(ans);
    while (trailingZero-- > 0) {
      sb.append("0");
    }
    return sb.toString();
  }

  public static void main(String[] args) {
    Solution s = new Solution();
    String a = "12";
    String b = "10";
    String ans = s.multiply(a, b);
    System.out.println(a + " * " + b + " = " + ans);
    if (!"120".equals(ans)) {
      throw new AssertionError();
    }

    a = "12345678";
    b = "87";
    ans = s.multiply(a, b);
    System.out.println(a + " * " + b + " = " + ans);
    if (!"1074073986".equals(ans)) {
      throw new AssertionError();
    }

    a = "0012345678";
    b = "0087";
    ans = s.multiply(a, b);
    System.out.println(a + " * " + b + " = " + ans);
    if (!"1074073986".equals(ans)) {
      throw new AssertionError();
    }

    a = "001234567800000000";
    b = "0087000000";
    ans = s.multiply(a, b);
    System.out.println(a + " * " + b + " = " + ans);
    if (!"107407398600000000000000".equals(ans)) {
      throw new AssertionError();
    }

    a = "31243242535342";
    b = "0";
    ans = s.multiply(a, b);
    System.out.println(a + " * " + b + " = " + ans);
    if (!"0".equals(ans)) {
      throw new AssertionError();
    }

    a =

    b = "912368301888368022394840960108863800439774650725209850681532166112747774";
    long start = System.nanoTime();
    ans = s.multiply(a, b);
    long end = System.nanoTime();
    System.out.println("elapsed time (s): " + (double) (end - start) / 1000.0 / 1000.0 / 1000.0);
    System.out.println(a + " * " + b + " = " + ans);
    if (!"600551678379277416295701654391322759435567182334825099268876949038935586332072681055603050825531427341487345211132597254519042068526750992377730361293500451707930720404409116011100636242669003183795409703514233439381210264731883177195591302447992460770894611200967811707866454404386541356452380172833250491297723897598419622945913970406766260708078966971385139986323271885332493679485767628110887453845114291667097643298056443228943518038407423847846268635139689759203719899567465215510885610067994586899976867716516218608139162050527926018706698414728574669035642765610769789303469744382701726529932621026844858130261151436184148593186667498925299791465492681893164590249301832164432775641395092088892832119538382570602820237102070140063883573180128984113895427466520122926799238305388074009657900610517310722225178682217103815379534499827303745960592952878395935097171012978804160832423884224672746938475892095174000448974286868205547845133566598343296993559628924325461966904603653016268920269352754046463705021503787048747485821061079830828546455382060307772685502840792067102046189918536178321350987441032689437673928732351361696776078860677622206375491233477083986478499889448485736681884956655486122967314287998431978980409026337310208161981285023826912374865035574429459890936349775249149639765066993851473593516672025522559029391676020200844707187649289576337317216714688761070342111389799599275628762792606847750651870776385574355214087162822348409039835072411709432671737334108345128957820343250524965054436626474664179888592547223768354862421183517089475123533013441346407677102227076774279820801946872632331530575880898782059152921109800742244573615261970359995643204083309312737367815492415673346291568033618673369641598471573667829921797146634791580943435345471133541006063108879487498201213138602313343022468428539127116222696623774608524571615653953263233412720583329279628273152527213780131561443757142076506307619424565014768592311553737555845738376227593187547773956359334739258743853746173381834077134154205898690233567029865194040535298220889565299330595855171603419086204259146182183590505787985474446744361691481576039631781613356001216114298144167164376560796369372521708101831211235144888443585668510959703433870187115697638501430701540403151549951415483065819286725740224839675805060032608836152076723922528722150532665365772347535162131443351412970844465958368126395254473388296459419876443597013397093303317508532905946797816451313778591353236595868748739834311971206310307730849345944779807160805659359745107847501187450939085989401602962661443019537269314141685483533955031034041313021625270579367311272237732555934270076227151267855267311924418404762869554555764637636230944373760546431074332982286315369484330229516844718033430262387900436125998512681310575309998179537890847490794077815629781886163987853151103541320139526134370641341002398580585285757023189855272272050907806445303674618174585185343637908015061968307406870496264818797084561204436435498578397186496899436371157366291301514566813721901039586580844756851880569563331338833736804582423418152451579745256268787245432662692687877304378686533785834945379449410918716812302588003069432605331590831323826979075523822448680078915537933332381374487995523695283142646825046380755341884577255426599086589954957144048971718682996306149971840696451054606946414501317913454350681980743611455194800970812387071799427452084431350968105601909345385983112568838583061510853082083840339089979707732232823170511393198949937160448057944672263251173950469650600523827784904580809016979321238853187837578176097063720554298671710638569482288335069949116606528859839260889514684127799188264359225976202960562979934438025107662196164418989714988274736393832679895349769711906607853235998725246620468903459062538039575145742361824838843863307339017381326513753514729872079599045837964850263599193254647933064245285251315109932805658687066772888403497281808366409051472583494028128628561393100448139646100071137212777446950817474973027826583983279919149790755646393200925683389941436782943352793036073804808353535280656491915593119267702508610228186601131841562888415431048600016452354319638329501185163888629956407477092516413709999840978815975611156954393831170037437554893181394308151383078527951691322834279438248346535351090525764065547517685499108331560564187921314059603120074474116892346715729590425591695944977589570088414302887119717758265584286311015659353475602082418878556840646549951050047618819031890162193837224439176643847538175454408029993756954183457833022153446696266484617192283876343870061851312606323959484017308072682852923609452824732030279808503529228202504356835350345899374347731782885343388071058957214574928956430206881212605348177835448547711949069515868284104372591907900125271125642466340303269930145910639143683343851575623000908291086906222160397599752259472705045144007034101855943227249359806801737096680186998258494398629982101118621348566758716862246091996495607606229145078171691798249972494116957347972399118092120649378756487563615367713372263154049908784029339115939246"
        .equals(ans)) {
      throw new AssertionError();
    }
  }
}
